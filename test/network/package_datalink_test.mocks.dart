// Mocks generated by Mockito 5.0.9 from annotations
// in adhoc_plugin/test/network/package_datalink_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:collection' as _i2;

import 'package:adhoc_plugin/src/appframework/config.dart' as _i14;
import 'package:adhoc_plugin/src/datalink/service/adhoc_device.dart' as _i9;
import 'package:adhoc_plugin/src/datalink/service/adhoc_event.dart' as _i10;
import 'package:adhoc_plugin/src/datalink/service/service_server.dart' as _i5;
import 'package:adhoc_plugin/src/datalink/utils/identifier.dart' as _i3;
import 'package:adhoc_plugin/src/datalink/utils/msg_adhoc.dart' as _i11;
import 'package:adhoc_plugin/src/datalink/utils/msg_header.dart' as _i7;
import 'package:adhoc_plugin/src/network/datalinkmanager/datalink_manager.dart'
    as _i8;
import 'package:adhoc_plugin/src/network/datalinkmanager/neighbors.dart' as _i4;
import 'package:adhoc_plugin/src/network/datalinkmanager/network_manager.dart'
    as _i12;
import 'package:adhoc_plugin/src/network/datalinkmanager/wrapper_ble.dart'
    as _i13;
import 'package:adhoc_plugin/src/network/datalinkmanager/wrapper_network.dart'
    as _i15;
import 'package:adhoc_plugin/src/network/datalinkmanager/wrapper_wifi.dart'
    as _i16;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeHashMap<K, V> extends _i1.Fake implements _i2.HashMap<K, V> {}

class _FakeIdentifier extends _i1.Fake implements _i3.Identifier {}

class _FakeNeighbors extends _i1.Fake implements _i4.Neighbors {}

class _FakeServiceServer extends _i1.Fake implements _i5.ServiceServer {}

class _FakeHashSet<E> extends _i1.Fake implements _i2.HashSet<E> {}

class _FakeStreamController<T> extends _i1.Fake
    implements _i6.StreamController<T> {}

class _FakeHeader extends _i1.Fake implements _i7.Header {}

/// A class which mocks [DataLinkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataLinkManager extends _i1.Mock implements _i8.DataLinkManager {
  MockDataLinkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i9.AdHocDevice> get directNeighbors =>
      (super.noSuchMethod(Invocation.getter(#directNeighbors),
          returnValue: <_i9.AdHocDevice>[]) as List<_i9.AdHocDevice>);
  @override
  _i6.Stream<_i10.AdHocEvent> get eventStream =>
      (super.noSuchMethod(Invocation.getter(#eventStream),
              returnValue: Stream<_i10.AdHocEvent>.empty())
          as _i6.Stream<_i10.AdHocEvent>);
  @override
  int checkState() =>
      (super.noSuchMethod(Invocation.method(#checkState, []), returnValue: 0)
          as int);
  @override
  void enable(int? duration, int? type) =>
      super.noSuchMethod(Invocation.method(#enable, [duration, type]),
          returnValueForMissingStub: null);
  @override
  void enableAll() => super.noSuchMethod(Invocation.method(#enableAll, []),
      returnValueForMissingStub: null);
  @override
  void disable(int? type) =>
      super.noSuchMethod(Invocation.method(#disable, [type]),
          returnValueForMissingStub: null);
  @override
  void disableAll() => super.noSuchMethod(Invocation.method(#disableAll, []),
      returnValueForMissingStub: null);
  @override
  void discovery() => super.noSuchMethod(Invocation.method(#discovery, []),
      returnValueForMissingStub: null);
  @override
  _i6.Future<void> connect(int? attempts, _i9.AdHocDevice? device) =>
      (super.noSuchMethod(Invocation.method(#connect, [attempts, device]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  void stopListening() =>
      super.noSuchMethod(Invocation.method(#stopListening, []),
          returnValueForMissingStub: null);
  @override
  void removeGroup() => super.noSuchMethod(Invocation.method(#removeGroup, []),
      returnValueForMissingStub: null);
  @override
  bool isWifiGroupOwner() =>
      (super.noSuchMethod(Invocation.method(#isWifiGroupOwner, []),
          returnValue: false) as bool);
  @override
  void sendMessage(String? address, _i11.MessageAdHoc? message) =>
      super.noSuchMethod(Invocation.method(#sendMessage, [address, message]),
          returnValueForMissingStub: null);
  @override
  void broadcast(_i11.MessageAdHoc? message) =>
      super.noSuchMethod(Invocation.method(#broadcast, [message]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<bool> broadcastObject(Object? object) =>
      (super.noSuchMethod(Invocation.method(#broadcastObject, [object]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  void broadcastExcept(_i11.MessageAdHoc? message, String? excluded) => super
      .noSuchMethod(Invocation.method(#broadcastExcept, [message, excluded]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<bool> broadcastObjectExcept(Object? object, String? excluded) =>
      (super.noSuchMethod(
          Invocation.method(#broadcastObjectExcept, [object, excluded]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<_i2.HashMap<String, _i9.AdHocDevice>> getPaired() =>
      (super.noSuchMethod(Invocation.method(#getPaired, []),
              returnValue: Future<_i2.HashMap<String, _i9.AdHocDevice>>.value(
                  _FakeHashMap<String, _i9.AdHocDevice>()))
          as _i6.Future<_i2.HashMap<String, _i9.AdHocDevice>>);
  @override
  bool isDirectNeighbor(String? address) =>
      (super.noSuchMethod(Invocation.method(#isDirectNeighbor, [address]),
          returnValue: false) as bool);
  @override
  List<_i9.AdHocDevice> getDirectNeighbors() =>
      (super.noSuchMethod(Invocation.method(#getDirectNeighbors, []),
          returnValue: <_i9.AdHocDevice>[]) as List<_i9.AdHocDevice>);
  @override
  bool isEnabled(int? type) =>
      (super.noSuchMethod(Invocation.method(#isEnabled, [type]),
          returnValue: false) as bool);
  @override
  _i6.Future<String> getAdapterName(int? type) =>
      (super.noSuchMethod(Invocation.method(#getAdapterName, [type]),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<_i2.HashMap<int, String>> getActiveAdapterNames() =>
      (super.noSuchMethod(Invocation.method(#getActiveAdapterNames, []),
              returnValue: Future<_i2.HashMap<int, String>>.value(
                  _FakeHashMap<int, String>()))
          as _i6.Future<_i2.HashMap<int, String>>);
  @override
  _i6.Future<bool> updateAdapterName(int? type, String? newName) => (super
      .noSuchMethod(Invocation.method(#updateAdapterName, [type, newName]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  void resetAdapterName(int? type) =>
      super.noSuchMethod(Invocation.method(#resetAdapterName, [type]),
          returnValueForMissingStub: null);
  @override
  void disconnectAll() =>
      super.noSuchMethod(Invocation.method(#disconnectAll, []),
          returnValueForMissingStub: null);
  @override
  void disconnect(String? remoteAddress) =>
      super.noSuchMethod(Invocation.method(#disconnect, [remoteAddress]),
          returnValueForMissingStub: null);
}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i12.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> sendMessage(_i11.MessageAdHoc? message) =>
      (super.noSuchMethod(Invocation.method(#sendMessage, [message]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  void disconnect() => super.noSuchMethod(Invocation.method(#disconnect, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [WrapperBle].
///
/// See the documentation for Mockito's code generation for more information.
class MockWrapperBle extends _i1.Mock implements _i13.WrapperBle {
  MockWrapperBle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get verbose =>
      (super.noSuchMethod(Invocation.getter(#verbose), returnValue: false)
          as bool);
  @override
  int get type =>
      (super.noSuchMethod(Invocation.getter(#type), returnValue: 0) as int);
  @override
  set type(int? _type) => super.noSuchMethod(Invocation.setter(#type, _type),
      returnValueForMissingStub: null);
  @override
  String get ownLabel =>
      (super.noSuchMethod(Invocation.getter(#ownLabel), returnValue: '')
          as String);
  @override
  set ownLabel(String? _ownLabel) =>
      super.noSuchMethod(Invocation.setter(#ownLabel, _ownLabel),
          returnValueForMissingStub: null);
  @override
  String get ownName =>
      (super.noSuchMethod(Invocation.getter(#ownName), returnValue: '')
          as String);
  @override
  set ownName(String? _ownName) =>
      super.noSuchMethod(Invocation.setter(#ownName, _ownName),
          returnValueForMissingStub: null);
  @override
  _i3.Identifier get ownMac => (super.noSuchMethod(Invocation.getter(#ownMac),
      returnValue: _FakeIdentifier()) as _i3.Identifier);
  @override
  set ownMac(_i3.Identifier? _ownMac) =>
      super.noSuchMethod(Invocation.setter(#ownMac, _ownMac),
          returnValueForMissingStub: null);
  @override
  bool get flood =>
      (super.noSuchMethod(Invocation.getter(#flood), returnValue: false)
          as bool);
  @override
  set flood(bool? _flood) =>
      super.noSuchMethod(Invocation.setter(#flood, _flood),
          returnValueForMissingStub: null);
  @override
  int get timeOut =>
      (super.noSuchMethod(Invocation.getter(#timeOut), returnValue: 0) as int);
  @override
  set timeOut(int? _timeOut) =>
      super.noSuchMethod(Invocation.setter(#timeOut, _timeOut),
          returnValueForMissingStub: null);
  @override
  int get attempts =>
      (super.noSuchMethod(Invocation.getter(#attempts), returnValue: 0) as int);
  @override
  set attempts(int? _attempts) =>
      super.noSuchMethod(Invocation.setter(#attempts, _attempts),
          returnValueForMissingStub: null);
  @override
  bool get enabled =>
      (super.noSuchMethod(Invocation.getter(#enabled), returnValue: false)
          as bool);
  @override
  set enabled(bool? _enabled) =>
      super.noSuchMethod(Invocation.setter(#enabled, _enabled),
          returnValueForMissingStub: null);
  @override
  bool get discoveryCompleted =>
      (super.noSuchMethod(Invocation.getter(#discoveryCompleted),
          returnValue: false) as bool);
  @override
  set discoveryCompleted(bool? _discoveryCompleted) => super.noSuchMethod(
      Invocation.setter(#discoveryCompleted, _discoveryCompleted),
      returnValueForMissingStub: null);
  @override
  bool get isDiscovering =>
      (super.noSuchMethod(Invocation.getter(#isDiscovering), returnValue: false)
          as bool);
  @override
  set isDiscovering(bool? _isDiscovering) =>
      super.noSuchMethod(Invocation.setter(#isDiscovering, _isDiscovering),
          returnValueForMissingStub: null);
  @override
  bool get isListening =>
      (super.noSuchMethod(Invocation.getter(#isListening), returnValue: false)
          as bool);
  @override
  set isListening(bool? _isListening) =>
      super.noSuchMethod(Invocation.setter(#isListening, _isListening),
          returnValueForMissingStub: null);
  @override
  _i4.Neighbors get neighbors =>
      (super.noSuchMethod(Invocation.getter(#neighbors),
          returnValue: _FakeNeighbors()) as _i4.Neighbors);
  @override
  set neighbors(_i4.Neighbors? _neighbors) =>
      super.noSuchMethod(Invocation.setter(#neighbors, _neighbors),
          returnValueForMissingStub: null);
  @override
  _i5.ServiceServer get serviceServer =>
      (super.noSuchMethod(Invocation.getter(#serviceServer),
          returnValue: _FakeServiceServer()) as _i5.ServiceServer);
  @override
  set serviceServer(_i5.ServiceServer? _serviceServer) =>
      super.noSuchMethod(Invocation.setter(#serviceServer, _serviceServer),
          returnValueForMissingStub: null);
  @override
  _i2.HashMap<String, _i12.NetworkManager> get mapAddrNetwork =>
      (super.noSuchMethod(Invocation.getter(#mapAddrNetwork),
              returnValue: _FakeHashMap<String, _i12.NetworkManager>())
          as _i2.HashMap<String, _i12.NetworkManager>);
  @override
  set mapAddrNetwork(
          _i2.HashMap<String, _i12.NetworkManager>? _mapAddrNetwork) =>
      super.noSuchMethod(Invocation.setter(#mapAddrNetwork, _mapAddrNetwork),
          returnValueForMissingStub: null);
  @override
  _i2.HashMap<_i3.Identifier, _i9.AdHocDevice> get mapMacDevices =>
      (super.noSuchMethod(Invocation.getter(#mapMacDevices),
              returnValue: _FakeHashMap<_i3.Identifier, _i9.AdHocDevice>())
          as _i2.HashMap<_i3.Identifier, _i9.AdHocDevice>);
  @override
  set mapMacDevices(
          _i2.HashMap<_i3.Identifier, _i9.AdHocDevice>? _mapMacDevices) =>
      super.noSuchMethod(Invocation.setter(#mapMacDevices, _mapMacDevices),
          returnValueForMissingStub: null);
  @override
  Set<String> get setFloodEvents =>
      (super.noSuchMethod(Invocation.getter(#setFloodEvents),
          returnValue: <String>{}) as Set<String>);
  @override
  set setFloodEvents(Set<String>? _setFloodEvents) =>
      super.noSuchMethod(Invocation.setter(#setFloodEvents, _setFloodEvents),
          returnValueForMissingStub: null);
  @override
  _i2.HashSet<_i9.AdHocDevice> get setRemoteDevices =>
      (super.noSuchMethod(Invocation.getter(#setRemoteDevices),
              returnValue: _FakeHashSet<_i9.AdHocDevice>())
          as _i2.HashSet<_i9.AdHocDevice>);
  @override
  set setRemoteDevices(_i2.HashSet<_i9.AdHocDevice>? _setRemoteDevices) => super
      .noSuchMethod(Invocation.setter(#setRemoteDevices, _setRemoteDevices),
          returnValueForMissingStub: null);
  @override
  _i6.StreamController<_i10.AdHocEvent> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController<_i10.AdHocEvent>())
          as _i6.StreamController<_i10.AdHocEvent>);
  @override
  set controller(_i6.StreamController<_i10.AdHocEvent>? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  List<_i9.AdHocDevice> get directNeighbors =>
      (super.noSuchMethod(Invocation.getter(#directNeighbors),
          returnValue: <_i9.AdHocDevice>[]) as List<_i9.AdHocDevice>);
  @override
  _i6.Stream<_i10.AdHocEvent> get eventStream =>
      (super.noSuchMethod(Invocation.getter(#eventStream),
              returnValue: Stream<_i10.AdHocEvent>.empty())
          as _i6.Stream<_i10.AdHocEvent>);
  @override
  _i6.Future<void> init(bool? verbose, _i14.Config? config) =>
      (super.noSuchMethod(Invocation.method(#init, [verbose, config]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  void enable(int? duration) =>
      super.noSuchMethod(Invocation.method(#enable, [duration]),
          returnValueForMissingStub: null);
  @override
  void disable() => super.noSuchMethod(Invocation.method(#disable, []),
      returnValueForMissingStub: null);
  @override
  void discovery() => super.noSuchMethod(Invocation.method(#discovery, []),
      returnValueForMissingStub: null);
  @override
  _i6.Future<void> connect(int? attempts, _i9.AdHocDevice? device) =>
      (super.noSuchMethod(Invocation.method(#connect, [attempts, device]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  void stopListening() =>
      super.noSuchMethod(Invocation.method(#stopListening, []),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i2.HashMap<String, _i9.AdHocDevice>> getPaired() =>
      (super.noSuchMethod(Invocation.method(#getPaired, []),
              returnValue: Future<_i2.HashMap<String, _i9.AdHocDevice>>.value(
                  _FakeHashMap<String, _i9.AdHocDevice>()))
          as _i6.Future<_i2.HashMap<String, _i9.AdHocDevice>>);
  @override
  _i6.Future<String> getAdapterName() =>
      (super.noSuchMethod(Invocation.method(#getAdapterName, []),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<bool> updateDeviceName(String? name) =>
      (super.noSuchMethod(Invocation.method(#updateDeviceName, [name]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> resetDeviceName() =>
      (super.noSuchMethod(Invocation.method(#resetDeviceName, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  bool checkFloodEvent(String? id) =>
      (super.noSuchMethod(Invocation.method(#checkFloodEvent, [id]),
          returnValue: false) as bool);
  @override
  bool isDirectNeighbor(String? label) =>
      (super.noSuchMethod(Invocation.method(#isDirectNeighbor, [label]),
          returnValue: false) as bool);
  @override
  void sendMessage(String? label, _i11.MessageAdHoc? message) =>
      super.noSuchMethod(Invocation.method(#sendMessage, [label, message]),
          returnValueForMissingStub: null);
  @override
  bool broadcast(_i11.MessageAdHoc? message) =>
      (super.noSuchMethod(Invocation.method(#broadcast, [message]),
          returnValue: false) as bool);
  @override
  bool broadcastExcept(_i11.MessageAdHoc? message, String? excluded) => (super
      .noSuchMethod(Invocation.method(#broadcastExcept, [message, excluded]),
          returnValue: false) as bool);
  @override
  void receivedPeerMessage(_i7.Header? header, _i12.NetworkManager? network) =>
      super.noSuchMethod(
          Invocation.method(#receivedPeerMessage, [header, network]),
          returnValueForMissingStub: null);
  @override
  void disconnect(String? label) =>
      super.noSuchMethod(Invocation.method(#disconnect, [label]),
          returnValueForMissingStub: null);
  @override
  void disconnectAll() =>
      super.noSuchMethod(Invocation.method(#disconnectAll, []),
          returnValueForMissingStub: null);
  @override
  void connectionClosed(_i3.Identifier? mac) =>
      super.noSuchMethod(Invocation.method(#connectionClosed, [mac]),
          returnValueForMissingStub: null);
}

/// A class which mocks [WrapperNetwork].
///
/// See the documentation for Mockito's code generation for more information.
class MockWrapperNetwork extends _i1.Mock implements _i15.WrapperNetwork {
  MockWrapperNetwork() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get verbose =>
      (super.noSuchMethod(Invocation.getter(#verbose), returnValue: false)
          as bool);
  @override
  int get type =>
      (super.noSuchMethod(Invocation.getter(#type), returnValue: 0) as int);
  @override
  set type(int? _type) => super.noSuchMethod(Invocation.setter(#type, _type),
      returnValueForMissingStub: null);
  @override
  String get ownLabel =>
      (super.noSuchMethod(Invocation.getter(#ownLabel), returnValue: '')
          as String);
  @override
  set ownLabel(String? _ownLabel) =>
      super.noSuchMethod(Invocation.setter(#ownLabel, _ownLabel),
          returnValueForMissingStub: null);
  @override
  String get ownName =>
      (super.noSuchMethod(Invocation.getter(#ownName), returnValue: '')
          as String);
  @override
  set ownName(String? _ownName) =>
      super.noSuchMethod(Invocation.setter(#ownName, _ownName),
          returnValueForMissingStub: null);
  @override
  _i3.Identifier get ownMac => (super.noSuchMethod(Invocation.getter(#ownMac),
      returnValue: _FakeIdentifier()) as _i3.Identifier);
  @override
  set ownMac(_i3.Identifier? _ownMac) =>
      super.noSuchMethod(Invocation.setter(#ownMac, _ownMac),
          returnValueForMissingStub: null);
  @override
  bool get flood =>
      (super.noSuchMethod(Invocation.getter(#flood), returnValue: false)
          as bool);
  @override
  set flood(bool? _flood) =>
      super.noSuchMethod(Invocation.setter(#flood, _flood),
          returnValueForMissingStub: null);
  @override
  int get timeOut =>
      (super.noSuchMethod(Invocation.getter(#timeOut), returnValue: 0) as int);
  @override
  set timeOut(int? _timeOut) =>
      super.noSuchMethod(Invocation.setter(#timeOut, _timeOut),
          returnValueForMissingStub: null);
  @override
  int get attempts =>
      (super.noSuchMethod(Invocation.getter(#attempts), returnValue: 0) as int);
  @override
  set attempts(int? _attempts) =>
      super.noSuchMethod(Invocation.setter(#attempts, _attempts),
          returnValueForMissingStub: null);
  @override
  bool get enabled =>
      (super.noSuchMethod(Invocation.getter(#enabled), returnValue: false)
          as bool);
  @override
  set enabled(bool? _enabled) =>
      super.noSuchMethod(Invocation.setter(#enabled, _enabled),
          returnValueForMissingStub: null);
  @override
  bool get discoveryCompleted =>
      (super.noSuchMethod(Invocation.getter(#discoveryCompleted),
          returnValue: false) as bool);
  @override
  set discoveryCompleted(bool? _discoveryCompleted) => super.noSuchMethod(
      Invocation.setter(#discoveryCompleted, _discoveryCompleted),
      returnValueForMissingStub: null);
  @override
  bool get isDiscovering =>
      (super.noSuchMethod(Invocation.getter(#isDiscovering), returnValue: false)
          as bool);
  @override
  set isDiscovering(bool? _isDiscovering) =>
      super.noSuchMethod(Invocation.setter(#isDiscovering, _isDiscovering),
          returnValueForMissingStub: null);
  @override
  bool get isListening =>
      (super.noSuchMethod(Invocation.getter(#isListening), returnValue: false)
          as bool);
  @override
  set isListening(bool? _isListening) =>
      super.noSuchMethod(Invocation.setter(#isListening, _isListening),
          returnValueForMissingStub: null);
  @override
  _i4.Neighbors get neighbors =>
      (super.noSuchMethod(Invocation.getter(#neighbors),
          returnValue: _FakeNeighbors()) as _i4.Neighbors);
  @override
  set neighbors(_i4.Neighbors? _neighbors) =>
      super.noSuchMethod(Invocation.setter(#neighbors, _neighbors),
          returnValueForMissingStub: null);
  @override
  _i5.ServiceServer get serviceServer =>
      (super.noSuchMethod(Invocation.getter(#serviceServer),
          returnValue: _FakeServiceServer()) as _i5.ServiceServer);
  @override
  set serviceServer(_i5.ServiceServer? _serviceServer) =>
      super.noSuchMethod(Invocation.setter(#serviceServer, _serviceServer),
          returnValueForMissingStub: null);
  @override
  _i2.HashMap<String, _i12.NetworkManager> get mapAddrNetwork =>
      (super.noSuchMethod(Invocation.getter(#mapAddrNetwork),
              returnValue: _FakeHashMap<String, _i12.NetworkManager>())
          as _i2.HashMap<String, _i12.NetworkManager>);
  @override
  set mapAddrNetwork(
          _i2.HashMap<String, _i12.NetworkManager>? _mapAddrNetwork) =>
      super.noSuchMethod(Invocation.setter(#mapAddrNetwork, _mapAddrNetwork),
          returnValueForMissingStub: null);
  @override
  _i2.HashMap<_i3.Identifier, _i9.AdHocDevice> get mapMacDevices =>
      (super.noSuchMethod(Invocation.getter(#mapMacDevices),
              returnValue: _FakeHashMap<_i3.Identifier, _i9.AdHocDevice>())
          as _i2.HashMap<_i3.Identifier, _i9.AdHocDevice>);
  @override
  set mapMacDevices(
          _i2.HashMap<_i3.Identifier, _i9.AdHocDevice>? _mapMacDevices) =>
      super.noSuchMethod(Invocation.setter(#mapMacDevices, _mapMacDevices),
          returnValueForMissingStub: null);
  @override
  Set<String> get setFloodEvents =>
      (super.noSuchMethod(Invocation.getter(#setFloodEvents),
          returnValue: <String>{}) as Set<String>);
  @override
  set setFloodEvents(Set<String>? _setFloodEvents) =>
      super.noSuchMethod(Invocation.setter(#setFloodEvents, _setFloodEvents),
          returnValueForMissingStub: null);
  @override
  _i2.HashSet<_i9.AdHocDevice> get setRemoteDevices =>
      (super.noSuchMethod(Invocation.getter(#setRemoteDevices),
              returnValue: _FakeHashSet<_i9.AdHocDevice>())
          as _i2.HashSet<_i9.AdHocDevice>);
  @override
  set setRemoteDevices(_i2.HashSet<_i9.AdHocDevice>? _setRemoteDevices) => super
      .noSuchMethod(Invocation.setter(#setRemoteDevices, _setRemoteDevices),
          returnValueForMissingStub: null);
  @override
  _i6.StreamController<_i10.AdHocEvent> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController<_i10.AdHocEvent>())
          as _i6.StreamController<_i10.AdHocEvent>);
  @override
  set controller(_i6.StreamController<_i10.AdHocEvent>? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  List<_i9.AdHocDevice> get directNeighbors =>
      (super.noSuchMethod(Invocation.getter(#directNeighbors),
          returnValue: <_i9.AdHocDevice>[]) as List<_i9.AdHocDevice>);
  @override
  _i6.Stream<_i10.AdHocEvent> get eventStream =>
      (super.noSuchMethod(Invocation.getter(#eventStream),
              returnValue: Stream<_i10.AdHocEvent>.empty())
          as _i6.Stream<_i10.AdHocEvent>);
  @override
  void init(bool? verbose, _i14.Config? config) =>
      super.noSuchMethod(Invocation.method(#init, [verbose, config]),
          returnValueForMissingStub: null);
  @override
  void enable(int? duration) =>
      super.noSuchMethod(Invocation.method(#enable, [duration]),
          returnValueForMissingStub: null);
  @override
  void disable() => super.noSuchMethod(Invocation.method(#disable, []),
      returnValueForMissingStub: null);
  @override
  void discovery() => super.noSuchMethod(Invocation.method(#discovery, []),
      returnValueForMissingStub: null);
  @override
  _i6.Future<void> connect(int? attempts, _i9.AdHocDevice? device) =>
      (super.noSuchMethod(Invocation.method(#connect, [attempts, device]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  _i6.Future<_i2.HashMap<String, _i9.AdHocDevice>> getPaired() =>
      (super.noSuchMethod(Invocation.method(#getPaired, []),
              returnValue: Future<_i2.HashMap<String, _i9.AdHocDevice>>.value(
                  _FakeHashMap<String, _i9.AdHocDevice>()))
          as _i6.Future<_i2.HashMap<String, _i9.AdHocDevice>>);
  @override
  _i6.Future<String> getAdapterName() =>
      (super.noSuchMethod(Invocation.method(#getAdapterName, []),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<bool> updateDeviceName(String? name) =>
      (super.noSuchMethod(Invocation.method(#updateDeviceName, [name]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> resetDeviceName() =>
      (super.noSuchMethod(Invocation.method(#resetDeviceName, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  void stopListening() =>
      super.noSuchMethod(Invocation.method(#stopListening, []),
          returnValueForMissingStub: null);
  @override
  bool checkFloodEvent(String? id) =>
      (super.noSuchMethod(Invocation.method(#checkFloodEvent, [id]),
          returnValue: false) as bool);
  @override
  bool isDirectNeighbor(String? label) =>
      (super.noSuchMethod(Invocation.method(#isDirectNeighbor, [label]),
          returnValue: false) as bool);
  @override
  void sendMessage(String? label, _i11.MessageAdHoc? message) =>
      super.noSuchMethod(Invocation.method(#sendMessage, [label, message]),
          returnValueForMissingStub: null);
  @override
  bool broadcast(_i11.MessageAdHoc? message) =>
      (super.noSuchMethod(Invocation.method(#broadcast, [message]),
          returnValue: false) as bool);
  @override
  bool broadcastExcept(_i11.MessageAdHoc? message, String? excluded) => (super
      .noSuchMethod(Invocation.method(#broadcastExcept, [message, excluded]),
          returnValue: false) as bool);
  @override
  void receivedPeerMessage(_i7.Header? header, _i12.NetworkManager? network) =>
      super.noSuchMethod(
          Invocation.method(#receivedPeerMessage, [header, network]),
          returnValueForMissingStub: null);
  @override
  void disconnect(String? label) =>
      super.noSuchMethod(Invocation.method(#disconnect, [label]),
          returnValueForMissingStub: null);
  @override
  void disconnectAll() =>
      super.noSuchMethod(Invocation.method(#disconnectAll, []),
          returnValueForMissingStub: null);
  @override
  void connectionClosed(_i3.Identifier? mac) =>
      super.noSuchMethod(Invocation.method(#connectionClosed, [mac]),
          returnValueForMissingStub: null);
}

/// A class which mocks [WrapperWifi].
///
/// See the documentation for Mockito's code generation for more information.
class MockWrapperWifi extends _i1.Mock implements _i16.WrapperWifi {
  MockWrapperWifi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isGroupOwner =>
      (super.noSuchMethod(Invocation.getter(#isGroupOwner), returnValue: false)
          as bool);
  @override
  bool get verbose =>
      (super.noSuchMethod(Invocation.getter(#verbose), returnValue: false)
          as bool);
  @override
  int get type =>
      (super.noSuchMethod(Invocation.getter(#type), returnValue: 0) as int);
  @override
  set type(int? _type) => super.noSuchMethod(Invocation.setter(#type, _type),
      returnValueForMissingStub: null);
  @override
  String get ownLabel =>
      (super.noSuchMethod(Invocation.getter(#ownLabel), returnValue: '')
          as String);
  @override
  set ownLabel(String? _ownLabel) =>
      super.noSuchMethod(Invocation.setter(#ownLabel, _ownLabel),
          returnValueForMissingStub: null);
  @override
  String get ownName =>
      (super.noSuchMethod(Invocation.getter(#ownName), returnValue: '')
          as String);
  @override
  set ownName(String? _ownName) =>
      super.noSuchMethod(Invocation.setter(#ownName, _ownName),
          returnValueForMissingStub: null);
  @override
  _i3.Identifier get ownMac => (super.noSuchMethod(Invocation.getter(#ownMac),
      returnValue: _FakeIdentifier()) as _i3.Identifier);
  @override
  set ownMac(_i3.Identifier? _ownMac) =>
      super.noSuchMethod(Invocation.setter(#ownMac, _ownMac),
          returnValueForMissingStub: null);
  @override
  bool get flood =>
      (super.noSuchMethod(Invocation.getter(#flood), returnValue: false)
          as bool);
  @override
  set flood(bool? _flood) =>
      super.noSuchMethod(Invocation.setter(#flood, _flood),
          returnValueForMissingStub: null);
  @override
  int get timeOut =>
      (super.noSuchMethod(Invocation.getter(#timeOut), returnValue: 0) as int);
  @override
  set timeOut(int? _timeOut) =>
      super.noSuchMethod(Invocation.setter(#timeOut, _timeOut),
          returnValueForMissingStub: null);
  @override
  int get attempts =>
      (super.noSuchMethod(Invocation.getter(#attempts), returnValue: 0) as int);
  @override
  set attempts(int? _attempts) =>
      super.noSuchMethod(Invocation.setter(#attempts, _attempts),
          returnValueForMissingStub: null);
  @override
  bool get enabled =>
      (super.noSuchMethod(Invocation.getter(#enabled), returnValue: false)
          as bool);
  @override
  set enabled(bool? _enabled) =>
      super.noSuchMethod(Invocation.setter(#enabled, _enabled),
          returnValueForMissingStub: null);
  @override
  bool get discoveryCompleted =>
      (super.noSuchMethod(Invocation.getter(#discoveryCompleted),
          returnValue: false) as bool);
  @override
  set discoveryCompleted(bool? _discoveryCompleted) => super.noSuchMethod(
      Invocation.setter(#discoveryCompleted, _discoveryCompleted),
      returnValueForMissingStub: null);
  @override
  bool get isDiscovering =>
      (super.noSuchMethod(Invocation.getter(#isDiscovering), returnValue: false)
          as bool);
  @override
  set isDiscovering(bool? _isDiscovering) =>
      super.noSuchMethod(Invocation.setter(#isDiscovering, _isDiscovering),
          returnValueForMissingStub: null);
  @override
  bool get isListening =>
      (super.noSuchMethod(Invocation.getter(#isListening), returnValue: false)
          as bool);
  @override
  set isListening(bool? _isListening) =>
      super.noSuchMethod(Invocation.setter(#isListening, _isListening),
          returnValueForMissingStub: null);
  @override
  _i4.Neighbors get neighbors =>
      (super.noSuchMethod(Invocation.getter(#neighbors),
          returnValue: _FakeNeighbors()) as _i4.Neighbors);
  @override
  set neighbors(_i4.Neighbors? _neighbors) =>
      super.noSuchMethod(Invocation.setter(#neighbors, _neighbors),
          returnValueForMissingStub: null);
  @override
  _i5.ServiceServer get serviceServer =>
      (super.noSuchMethod(Invocation.getter(#serviceServer),
          returnValue: _FakeServiceServer()) as _i5.ServiceServer);
  @override
  set serviceServer(_i5.ServiceServer? _serviceServer) =>
      super.noSuchMethod(Invocation.setter(#serviceServer, _serviceServer),
          returnValueForMissingStub: null);
  @override
  _i2.HashMap<String, _i12.NetworkManager> get mapAddrNetwork =>
      (super.noSuchMethod(Invocation.getter(#mapAddrNetwork),
              returnValue: _FakeHashMap<String, _i12.NetworkManager>())
          as _i2.HashMap<String, _i12.NetworkManager>);
  @override
  set mapAddrNetwork(
          _i2.HashMap<String, _i12.NetworkManager>? _mapAddrNetwork) =>
      super.noSuchMethod(Invocation.setter(#mapAddrNetwork, _mapAddrNetwork),
          returnValueForMissingStub: null);
  @override
  _i2.HashMap<_i3.Identifier, _i9.AdHocDevice> get mapMacDevices =>
      (super.noSuchMethod(Invocation.getter(#mapMacDevices),
              returnValue: _FakeHashMap<_i3.Identifier, _i9.AdHocDevice>())
          as _i2.HashMap<_i3.Identifier, _i9.AdHocDevice>);
  @override
  set mapMacDevices(
          _i2.HashMap<_i3.Identifier, _i9.AdHocDevice>? _mapMacDevices) =>
      super.noSuchMethod(Invocation.setter(#mapMacDevices, _mapMacDevices),
          returnValueForMissingStub: null);
  @override
  Set<String> get setFloodEvents =>
      (super.noSuchMethod(Invocation.getter(#setFloodEvents),
          returnValue: <String>{}) as Set<String>);
  @override
  set setFloodEvents(Set<String>? _setFloodEvents) =>
      super.noSuchMethod(Invocation.setter(#setFloodEvents, _setFloodEvents),
          returnValueForMissingStub: null);
  @override
  _i2.HashSet<_i9.AdHocDevice> get setRemoteDevices =>
      (super.noSuchMethod(Invocation.getter(#setRemoteDevices),
              returnValue: _FakeHashSet<_i9.AdHocDevice>())
          as _i2.HashSet<_i9.AdHocDevice>);
  @override
  set setRemoteDevices(_i2.HashSet<_i9.AdHocDevice>? _setRemoteDevices) => super
      .noSuchMethod(Invocation.setter(#setRemoteDevices, _setRemoteDevices),
          returnValueForMissingStub: null);
  @override
  _i6.StreamController<_i10.AdHocEvent> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController<_i10.AdHocEvent>())
          as _i6.StreamController<_i10.AdHocEvent>);
  @override
  set controller(_i6.StreamController<_i10.AdHocEvent>? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  List<_i9.AdHocDevice> get directNeighbors =>
      (super.noSuchMethod(Invocation.getter(#directNeighbors),
          returnValue: <_i9.AdHocDevice>[]) as List<_i9.AdHocDevice>);
  @override
  _i6.Stream<_i10.AdHocEvent> get eventStream =>
      (super.noSuchMethod(Invocation.getter(#eventStream),
              returnValue: Stream<_i10.AdHocEvent>.empty())
          as _i6.Stream<_i10.AdHocEvent>);
  @override
  _i6.Future<void> init(bool? verbose, _i14.Config? config) =>
      (super.noSuchMethod(Invocation.method(#init, [verbose, config]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  void enable(int? duration) =>
      super.noSuchMethod(Invocation.method(#enable, [duration]),
          returnValueForMissingStub: null);
  @override
  void disable() => super.noSuchMethod(Invocation.method(#disable, []),
      returnValueForMissingStub: null);
  @override
  void discovery() => super.noSuchMethod(Invocation.method(#discovery, []),
      returnValueForMissingStub: null);
  @override
  _i6.Future<void> connect(int? attempts, _i9.AdHocDevice? device) =>
      (super.noSuchMethod(Invocation.method(#connect, [attempts, device]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  void stopListening() =>
      super.noSuchMethod(Invocation.method(#stopListening, []),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i2.HashMap<String, _i9.AdHocDevice>> getPaired() =>
      (super.noSuchMethod(Invocation.method(#getPaired, []),
              returnValue: Future<_i2.HashMap<String, _i9.AdHocDevice>>.value(
                  _FakeHashMap<String, _i9.AdHocDevice>()))
          as _i6.Future<_i2.HashMap<String, _i9.AdHocDevice>>);
  @override
  _i6.Future<String> getAdapterName() =>
      (super.noSuchMethod(Invocation.method(#getAdapterName, []),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<bool> updateDeviceName(String? name) =>
      (super.noSuchMethod(Invocation.method(#updateDeviceName, [name]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> resetDeviceName() =>
      (super.noSuchMethod(Invocation.method(#resetDeviceName, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  void removeGroup() => super.noSuchMethod(Invocation.method(#removeGroup, []),
      returnValueForMissingStub: null);
  @override
  bool isWifiGroupOwner() =>
      (super.noSuchMethod(Invocation.method(#isWifiGroupOwner, []),
          returnValue: false) as bool);
  @override
  bool checkFloodEvent(String? id) =>
      (super.noSuchMethod(Invocation.method(#checkFloodEvent, [id]),
          returnValue: false) as bool);
  @override
  bool isDirectNeighbor(String? label) =>
      (super.noSuchMethod(Invocation.method(#isDirectNeighbor, [label]),
          returnValue: false) as bool);
  @override
  void sendMessage(String? label, _i11.MessageAdHoc? message) =>
      super.noSuchMethod(Invocation.method(#sendMessage, [label, message]),
          returnValueForMissingStub: null);
  @override
  bool broadcast(_i11.MessageAdHoc? message) =>
      (super.noSuchMethod(Invocation.method(#broadcast, [message]),
          returnValue: false) as bool);
  @override
  bool broadcastExcept(_i11.MessageAdHoc? message, String? excluded) => (super
      .noSuchMethod(Invocation.method(#broadcastExcept, [message, excluded]),
          returnValue: false) as bool);
  @override
  void receivedPeerMessage(_i7.Header? header, _i12.NetworkManager? network) =>
      super.noSuchMethod(
          Invocation.method(#receivedPeerMessage, [header, network]),
          returnValueForMissingStub: null);
  @override
  void disconnect(String? label) =>
      super.noSuchMethod(Invocation.method(#disconnect, [label]),
          returnValueForMissingStub: null);
  @override
  void disconnectAll() =>
      super.noSuchMethod(Invocation.method(#disconnectAll, []),
          returnValueForMissingStub: null);
  @override
  void connectionClosed(_i3.Identifier? mac) =>
      super.noSuchMethod(Invocation.method(#connectionClosed, [mac]),
          returnValueForMissingStub: null);
}

/// A class which mocks [MessageAdHoc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageAdHoc extends _i1.Mock implements _i11.MessageAdHoc {
  MockMessageAdHoc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set header(_i7.Header? header) =>
      super.noSuchMethod(Invocation.setter(#header, header),
          returnValueForMissingStub: null);
  @override
  set pdu(Object? pdu) => super.noSuchMethod(Invocation.setter(#pdu, pdu),
      returnValueForMissingStub: null);
  @override
  _i7.Header get header => (super.noSuchMethod(Invocation.getter(#header),
      returnValue: _FakeHeader()) as _i7.Header);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [Header].
///
/// See the documentation for Mockito's code generation for more information.
class MockHeader extends _i1.Mock implements _i7.Header {
  MockHeader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set address(String? _address) =>
      super.noSuchMethod(Invocation.setter(#address, _address),
          returnValueForMissingStub: null);
  @override
  set deviceType(int? _deviceType) =>
      super.noSuchMethod(Invocation.setter(#deviceType, _deviceType),
          returnValueForMissingStub: null);
  @override
  set messageType(int? messageType) =>
      super.noSuchMethod(Invocation.setter(#messageType, messageType),
          returnValueForMissingStub: null);
  @override
  int get messageType =>
      (super.noSuchMethod(Invocation.getter(#messageType), returnValue: 0)
          as int);
  @override
  String get label =>
      (super.noSuchMethod(Invocation.getter(#label), returnValue: '')
          as String);
  @override
  _i3.Identifier get mac => (super.noSuchMethod(Invocation.getter(#mac),
      returnValue: _FakeIdentifier()) as _i3.Identifier);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}
