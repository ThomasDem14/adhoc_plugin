// Mocks generated by Mockito 5.0.9 from annotations
// in adhoc_plugin/test/network/package_datalink_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:adhoc_plugin/src/datalink/utils/identifier.dart' as _i3;
import 'package:adhoc_plugin/src/datalink/utils/msg_adhoc.dart' as _i6;
import 'package:adhoc_plugin/src/datalink/utils/msg_header.dart' as _i2;
import 'package:adhoc_plugin/src/network/datalinkmanager/network_manager.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeHeader extends _i1.Fake implements _i2.Header {}

class _FakeIdentifier extends _i1.Fake implements _i3.Identifier {}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i4.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> sendMessage(_i6.MessageAdHoc? message) =>
      (super.noSuchMethod(Invocation.method(#sendMessage, [message]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  void disconnect() => super.noSuchMethod(Invocation.method(#disconnect, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [MessageAdHoc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageAdHoc extends _i1.Mock implements _i6.MessageAdHoc {
  MockMessageAdHoc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Header get header => (super.noSuchMethod(Invocation.getter(#header),
      returnValue: _FakeHeader()) as _i2.Header);
  @override
  set header(_i2.Header? _header) =>
      super.noSuchMethod(Invocation.setter(#header, _header),
          returnValueForMissingStub: null);
  @override
  set pdu(Object? _pdu) => super.noSuchMethod(Invocation.setter(#pdu, _pdu),
      returnValueForMissingStub: null);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [Header].
///
/// See the documentation for Mockito's code generation for more information.
class MockHeader extends _i1.Mock implements _i2.Header {
  MockHeader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get messageType =>
      (super.noSuchMethod(Invocation.getter(#messageType), returnValue: 0)
          as int);
  @override
  set messageType(int? _messageType) =>
      super.noSuchMethod(Invocation.setter(#messageType, _messageType),
          returnValueForMissingStub: null);
  @override
  set seqNum(int? _seqNum) =>
      super.noSuchMethod(Invocation.setter(#seqNum, _seqNum),
          returnValueForMissingStub: null);
  @override
  set address(String? _address) =>
      super.noSuchMethod(Invocation.setter(#address, _address),
          returnValueForMissingStub: null);
  @override
  set deviceType(int? _deviceType) =>
      super.noSuchMethod(Invocation.setter(#deviceType, _deviceType),
          returnValueForMissingStub: null);
  @override
  String get label =>
      (super.noSuchMethod(Invocation.getter(#label), returnValue: '')
          as String);
  @override
  _i3.Identifier get mac => (super.noSuchMethod(Invocation.getter(#mac),
      returnValue: _FakeIdentifier()) as _i3.Identifier);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}
